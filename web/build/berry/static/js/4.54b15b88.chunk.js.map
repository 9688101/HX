{"version":3,"file":"static/js/4.54b15b88.chunk.js","mappings":"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","sources":["ui-component/cards/Skeleton/EarningCard.js","views/Dashboard/component/StatisticalLineChartCard.js","ui-component/cards/Skeleton/TotalGrowthBarChart.js","views/Dashboard/component/StatisticalBarChart.js","utils/chart.js","views/Dashboard/index.js","assets/images/icons/shape-avatar.svg","ui-component/SvgColor.js","ui-component/cards/UserCard.js"],"sourcesContent":["// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - EARNING CARD ||============================== //\r\n\r\nconst EarningCard = () => (\r\n  <Card>\r\n    <CardContent>\r\n      <Grid container direction=\"column\">\r\n        <Grid item>\r\n          <Grid container justifyContent=\"space-between\">\r\n            <Grid item>\r\n              <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n            </Grid>\r\n            <Grid item>\r\n              <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Skeleton variant=\"rectangular\" height={30} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport default EarningCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme, styled } from '@mui/material/styles';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonTotalOrderCard from 'ui-component/cards/Skeleton/EarningCard';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n  ...theme.typography.CardWrapper,\r\n  color: '#fff',\r\n  overflow: 'hidden',\r\n  position: 'relative',\r\n  '&>div': {\r\n    position: 'relative',\r\n    zIndex: 5\r\n  },\r\n  '&:after': {\r\n    content: '\"\"',\r\n    position: 'absolute',\r\n    width: 210,\r\n    height: 210,\r\n    background: theme.palette.primary[800],\r\n    borderRadius: '50%',\r\n    zIndex: 1,\r\n    top: -85,\r\n    right: -95,\r\n    [theme.breakpoints.down('sm')]: {\r\n      top: -105,\r\n      right: -140\r\n    }\r\n  },\r\n  '&:before': {\r\n    content: '\"\"',\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    width: 210,\r\n    height: 210,\r\n    background: theme.palette.primary[800],\r\n    borderRadius: '50%',\r\n    top: -125,\r\n    right: -15,\r\n    opacity: 0.5,\r\n    [theme.breakpoints.down('sm')]: {\r\n      top: -155,\r\n      right: -70\r\n    }\r\n  }\r\n}));\r\n\r\n// ==============================|| DASHBOARD - TOTAL ORDER LINE CHART CARD ||============================== //\r\n\r\nconst StatisticalLineChartCard = ({ isLoading, title, chartData, todayValue }) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <SkeletonTotalOrderCard />\r\n      ) : (\r\n        <CardWrapper border={false} content={false}>\r\n          <Box sx={{ p: 2.25 }}>\r\n            <Grid>\r\n              <Grid item sx={{ mb: 0.75 }}>\r\n                <Grid container alignItems=\"center\">\r\n                  <Grid item xs={6}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\r\n                          {todayValue || '0'}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item></Grid>\r\n                      <Grid item xs={12}>\r\n                        <Typography\r\n                          sx={{\r\n                            fontSize: '1rem',\r\n                            fontWeight: 500,\r\n                            color: theme.palette.primary[200]\r\n                          }}\r\n                        >\r\n                          {title}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    {chartData ? (\r\n                      <Chart {...chartData} />\r\n                    ) : (\r\n                      <Typography\r\n                        sx={{\r\n                          fontSize: '1rem',\r\n                          fontWeight: 500,\r\n                          color: theme.palette.primary[200]\r\n                        }}\r\n                      >\r\n                        无数据\r\n                      </Typography>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </CardWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nStatisticalLineChartCard.propTypes = {\r\n  isLoading: PropTypes.bool,\r\n  title: PropTypes.string\r\n};\r\n\r\nexport default StatisticalLineChartCard;\r\n","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// project imports\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// ==============================|| SKELETON TOTAL GROWTH BAR CHART ||============================== //\r\n\r\nconst TotalGrowthBarChart = () => (\r\n  <Card>\r\n    <CardContent>\r\n      <Grid container spacing={gridSpacing}>\r\n        <Grid item xs={12}>\r\n          <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n            <Grid item xs zeroMinWidth>\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                  <Skeleton variant=\"text\" />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Skeleton variant=\"rectangular\" height={20} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Skeleton variant=\"rectangular\" height={50} width={80} />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Skeleton variant=\"rectangular\" height={530} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport default TotalGrowthBarChart;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Grid, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { Box } from '@mui/material';\r\n\r\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\r\n\r\nconst StatisticalBarChart = ({ isLoading, chartDatas }) => {\r\n  chartData.options.xaxis.categories = chartDatas.xaxis;\r\n  chartData.series = chartDatas.data;\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <SkeletonTotalGrowthBarChart />\r\n      ) : (\r\n        <MainCard>\r\n          <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n              <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Grid item>\r\n                  <Typography variant=\"h3\">统计</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              {chartData.series ? (\r\n                <Chart {...chartData} />\r\n              ) : (\r\n                <Box\r\n                  sx={{\r\n                    minHeight: '490px',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                >\r\n                  <Typography variant=\"h3\" color={'#697586'}>\r\n                    暂无数据\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </MainCard>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nStatisticalBarChart.propTypes = {\r\n  isLoading: PropTypes.bool\r\n};\r\n\r\nexport default StatisticalBarChart;\r\n\r\nconst chartData = {\r\n  height: 480,\r\n  type: 'bar',\r\n  options: {\r\n    colors: [\r\n      '#008FFB',\r\n      '#00E396',\r\n      '#FEB019',\r\n      '#FF4560',\r\n      '#775DD0',\r\n      '#55efc4',\r\n      '#81ecec',\r\n      '#74b9ff',\r\n      '#a29bfe',\r\n      '#00b894',\r\n      '#00cec9',\r\n      '#0984e3',\r\n      '#6c5ce7',\r\n      '#ffeaa7',\r\n      '#fab1a0',\r\n      '#ff7675',\r\n      '#fd79a8',\r\n      '#fdcb6e',\r\n      '#e17055',\r\n      '#d63031',\r\n      '#e84393'\r\n    ],\r\n    chart: {\r\n      id: 'bar-chart',\r\n      stacked: true,\r\n      toolbar: {\r\n        show: true\r\n      },\r\n      zoom: {\r\n        enabled: true\r\n      }\r\n    },\r\n    responsive: [\r\n      {\r\n        breakpoint: 480,\r\n        options: {\r\n          legend: {\r\n            position: 'bottom',\r\n            offsetX: -10,\r\n            offsetY: 0\r\n          }\r\n        }\r\n      }\r\n    ],\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: '50%'\r\n      }\r\n    },\r\n    xaxis: {\r\n      type: 'category',\r\n      categories: []\r\n    },\r\n    legend: {\r\n      show: true,\r\n      fontSize: '14px',\r\n      fontFamily: `'Roboto', sans-serif`,\r\n      position: 'bottom',\r\n      offsetX: 20,\r\n      labels: {\r\n        useSeriesColors: false\r\n      },\r\n      markers: {\r\n        width: 16,\r\n        height: 16,\r\n        radius: 5\r\n      },\r\n      itemMargin: {\r\n        horizontal: 15,\r\n        vertical: 8\r\n      }\r\n    },\r\n    fill: {\r\n      type: 'solid'\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    grid: {\r\n      show: true\r\n    },\r\n    tooltip: {\r\n      theme: 'dark',\r\n      fixed: {\r\n        enabled: false\r\n      },\r\n      y: {\r\n        formatter: function (val) {\r\n          return '$' + val;\r\n        }\r\n      },\r\n      marker: {\r\n        show: false\r\n      }\r\n    }\r\n  },\r\n  series: []\r\n};\r\n","export function getLastSevenDays() {\r\n  const dates = [];\r\n  for (let i = 6; i >= 0; i--) {\r\n    const d = new Date();\r\n    d.setDate(d.getDate() - i);\r\n    const month = '' + (d.getMonth() + 1);\r\n    const day = '' + d.getDate();\r\n    const year = d.getFullYear();\r\n\r\n    const formattedDate = [year, month.padStart(2, '0'), day.padStart(2, '0')].join('-');\r\n    dates.push(formattedDate);\r\n  }\r\n  return dates;\r\n}\r\n\r\nexport function getTodayDay() {\r\n  let today = new Date();\r\n  return today.toISOString().slice(0, 10);\r\n}\r\n\r\nexport function generateChartOptions(data, unit) {\r\n  const dates = data.map((item) => item.date);\r\n  const values = data.map((item) => item.value);\r\n\r\n  const minDate = dates[0];\r\n  const maxDate = dates[dates.length - 1];\r\n\r\n  const minValue = Math.min(...values);\r\n  const maxValue = Math.max(...values);\r\n\r\n  return {\r\n    series: [\r\n      {\r\n        data: values\r\n      }\r\n    ],\r\n    type: 'line',\r\n    height: 90,\r\n    options: {\r\n      chart: {\r\n        sparkline: {\r\n          enabled: true\r\n        },\r\n        background: 'transparent'\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      colors: ['#fff'],\r\n      fill: {\r\n        type: 'solid',\r\n        opacity: 1\r\n      },\r\n      stroke: {\r\n        curve: 'smooth',\r\n        width: 3\r\n      },\r\n      xaxis: {\r\n        categories: dates,\r\n        labels: {\r\n          show: false\r\n        },\r\n        min: minDate,\r\n        max: maxDate\r\n      },\r\n      yaxis: {\r\n        min: minValue,\r\n        max: maxValue,\r\n        labels: {\r\n          show: false\r\n        }\r\n      },\r\n      tooltip: {\r\n        theme: 'dark',\r\n        fixed: {\r\n          enabled: false\r\n        },\r\n        x: {\r\n          format: 'yyyy-MM-dd'\r\n        },\r\n        y: {\r\n          formatter: function (val) {\r\n            return val + ` ${unit}`;\r\n          },\r\n          title: {\r\n            formatter: function () {\r\n              return '';\r\n            }\r\n          }\r\n        },\r\n        marker: {\r\n          show: false\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { Grid, Typography } from '@mui/material';\r\nimport { gridSpacing } from 'store/constant';\r\nimport StatisticalLineChartCard from './component/StatisticalLineChartCard';\r\nimport StatisticalBarChart from './component/StatisticalBarChart';\r\nimport { generateChartOptions, getLastSevenDays } from 'utils/chart';\r\nimport { API } from 'utils/api';\r\nimport { showError, calculateQuota, renderNumber } from 'utils/common';\r\nimport UserCard from 'ui-component/cards/UserCard';\r\n\r\nconst Dashboard = () => {\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [statisticalData, setStatisticalData] = useState([]);\r\n  const [requestChart, setRequestChart] = useState(null);\r\n  const [quotaChart, setQuotaChart] = useState(null);\r\n  const [tokenChart, setTokenChart] = useState(null);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const userDashboard = async () => {\r\n    const res = await API.get('/api/user/dashboard');\r\n    const { success, message, data } = res.data;\r\n    if (success) {\r\n      if (data) {\r\n        let lineData = getLineDataGroup(data);\r\n        setRequestChart(getLineCardOption(lineData, 'RequestCount'));\r\n        setQuotaChart(getLineCardOption(lineData, 'Quota'));\r\n        setTokenChart(getLineCardOption(lineData, 'PromptTokens'));\r\n        setStatisticalData(getBarDataGroup(data));\r\n      }\r\n    } else {\r\n      showError(message);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const loadUser = async () => {\r\n    let res = await API.get(`/api/user/self`);\r\n    const { success, message, data } = res.data;\r\n    if (success) {\r\n      setUsers(data);\r\n    } else {\r\n      showError(message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    userDashboard();\r\n    loadUser();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={gridSpacing}>\r\n      <Grid item xs={12}>\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item lg={4} xs={12}>\r\n            <StatisticalLineChartCard\r\n              isLoading={isLoading}\r\n              title=\"今日请求量\"\r\n              chartData={requestChart?.chartData}\r\n              todayValue={requestChart?.todayValue}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={4} xs={12}>\r\n            <StatisticalLineChartCard\r\n              isLoading={isLoading}\r\n              title=\"今日消费\"\r\n              chartData={quotaChart?.chartData}\r\n              todayValue={quotaChart?.todayValue}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={4} xs={12}>\r\n            <StatisticalLineChartCard\r\n              isLoading={isLoading}\r\n              title=\"今日 token\"\r\n              chartData={tokenChart?.chartData}\r\n              todayValue={tokenChart?.todayValue}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item lg={8} xs={12}>\r\n            <StatisticalBarChart isLoading={isLoading} chartDatas={statisticalData} />\r\n          </Grid>\r\n          <Grid item lg={4} xs={12}>\r\n            <UserCard>\r\n              <Grid container spacing={gridSpacing} justifyContent=\"center\" alignItems=\"center\" paddingTop={'20px'}>\r\n                <Grid item xs={4}>\r\n                  <Typography variant=\"h4\">余额：</Typography>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                  <Typography variant=\"h3\"> {users?.quota ? '$' + calculateQuota(users.quota) : '未知'}</Typography>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <Typography variant=\"h4\">已使用：</Typography>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                  <Typography variant=\"h3\"> {users?.used_quota ? '$' + calculateQuota(users.used_quota) : '未知'}</Typography>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <Typography variant=\"h4\">调用次数：</Typography>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                  <Typography variant=\"h3\"> {users?.request_count || '未知'}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </UserCard>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default Dashboard;\r\n\r\nfunction getLineDataGroup(statisticalData) {\r\n  let groupedData = statisticalData.reduce((acc, cur) => {\r\n    if (!acc[cur.Day]) {\r\n      acc[cur.Day] = {\r\n        date: cur.Day,\r\n        RequestCount: 0,\r\n        Quota: 0,\r\n        PromptTokens: 0,\r\n        CompletionTokens: 0\r\n      };\r\n    }\r\n    acc[cur.Day].RequestCount += cur.RequestCount;\r\n    acc[cur.Day].Quota += cur.Quota;\r\n    acc[cur.Day].PromptTokens += cur.PromptTokens;\r\n    acc[cur.Day].CompletionTokens += cur.CompletionTokens;\r\n    return acc;\r\n  }, {});\r\n  let lastSevenDays = getLastSevenDays();\r\n  return lastSevenDays.map((day) => {\r\n    if (!groupedData[day]) {\r\n      return {\r\n        date: day,\r\n        RequestCount: 0,\r\n        Quota: 0,\r\n        PromptTokens: 0,\r\n        CompletionTokens: 0\r\n      };\r\n    } else {\r\n      return groupedData[day];\r\n    }\r\n  });\r\n}\r\n\r\nfunction getBarDataGroup(data) {\r\n  const lastSevenDays = getLastSevenDays();\r\n  const result = [];\r\n  const map = new Map();\r\n\r\n  for (const item of data) {\r\n    if (!map.has(item.ModelName)) {\r\n      const newData = { name: item.ModelName, data: new Array(7) };\r\n      map.set(item.ModelName, newData);\r\n      result.push(newData);\r\n    }\r\n    const index = lastSevenDays.indexOf(item.Day);\r\n    if (index !== -1) {\r\n      map.get(item.ModelName).data[index] = calculateQuota(item.Quota, 3);\r\n    }\r\n  }\r\n\r\n  for (const item of result) {\r\n    for (let i = 0; i < 7; i++) {\r\n      if (item.data[i] === undefined) {\r\n        item.data[i] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { data: result, xaxis: lastSevenDays };\r\n}\r\n\r\nfunction getLineCardOption(lineDataGroup, field) {\r\n  let todayValue = 0;\r\n  let chartData = null;\r\n  const lastItem = lineDataGroup.length - 1;\r\n  let lineData = lineDataGroup.map((item, index) => {\r\n    let tmp = {\r\n      date: item.date,\r\n      value: item[field]\r\n    };\r\n    switch (field) {\r\n      case 'Quota':\r\n        tmp.value = calculateQuota(item.Quota, 3);\r\n        break;\r\n      case 'PromptTokens':\r\n        tmp.value += item.CompletionTokens;\r\n        break;\r\n    }\r\n\r\n    if (index == lastItem) {\r\n      todayValue = tmp.value;\r\n    }\r\n    return tmp;\r\n  });\r\n\r\n  switch (field) {\r\n    case 'RequestCount':\r\n      chartData = generateChartOptions(lineData, '次');\r\n      todayValue = renderNumber(todayValue);\r\n      break;\r\n    case 'Quota':\r\n      chartData = generateChartOptions(lineData, '美元');\r\n      todayValue = '$' + renderNumber(todayValue);\r\n      break;\r\n    case 'PromptTokens':\r\n      chartData = generateChartOptions(lineData, '');\r\n      todayValue = renderNumber(todayValue);\r\n      break;\r\n  }\r\n\r\n  return { chartData: chartData, todayValue: todayValue };\r\n}\r\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgShapeAvatar(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 62,\n    viewBox: \"0 0 144 62\",\n    width: 144,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m111.34 23.88c-10.62-10.46-18.5-23.88-38.74-23.88h-1.2c-20.24 0-28.12 13.42-38.74 23.88-7.72 9.64-19.44 11.74-32.66 12.12v26h144v-26c-13.22-.38-24.94-2.48-32.66-12.12z\",\n    fill: \"#fff\",\n    fillRule: \"evenodd\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgShapeAvatar);\nexport default __webpack_public_path__ + \"static/media/shape-avatar.096ea8015d2d14ba4ce707d949a97823.svg\";\nexport { ForwardRef as ReactComponent };","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst SvgColor = forwardRef(({ src, sx, ...other }, ref) => (\r\n  <Box\r\n    component=\"span\"\r\n    className=\"svg-color\"\r\n    ref={ref}\r\n    sx={{\r\n      width: 24,\r\n      height: 24,\r\n      display: 'inline-block',\r\n      bgcolor: 'currentColor',\r\n      mask: `url(${src}) no-repeat center / contain`,\r\n      WebkitMask: `url(${src}) no-repeat center / contain`,\r\n      ...sx\r\n    }}\r\n    {...other}\r\n  />\r\n));\r\n\r\nSvgColor.propTypes = {\r\n  src: PropTypes.string,\r\n  sx: PropTypes.object\r\n};\r\n\r\nexport default SvgColor;\r\n","/*\r\n * UserCard.js\r\n *\r\n * This file uses code from the Minimal UI project, available at\r\n * https://github.com/minimal-ui-kit/material-kit-react/blob/main/src/sections/blog/post-card.jsx\r\n *\r\n * Minimal UI is licensed under the MIT License. A copy of the license is included below:\r\n *\r\n * MIT License\r\n *\r\n * Copyright (c) 2021 Minimal UI (https://minimals.cc/)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\nimport { Box, Avatar } from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport Card from '@mui/material/Card';\r\nimport shapeAvatar from 'assets/images/icons/shape-avatar.svg';\r\nimport coverAvatar from 'assets/images/invite/cover.jpg';\r\nimport userAvatar from 'assets/images/users/user-round.svg';\r\nimport SvgColor from 'ui-component/SvgColor';\r\n\r\nimport React from 'react';\r\n\r\nexport default function UserCard({ children }) {\r\n  const renderShape = (\r\n    <SvgColor\r\n      color=\"paper\"\r\n      src={shapeAvatar}\r\n      sx={{\r\n        width: '100%',\r\n        height: 62,\r\n        zIndex: 10,\r\n        bottom: -26,\r\n        position: 'absolute',\r\n        color: 'background.paper'\r\n      }}\r\n    />\r\n  );\r\n\r\n  const renderAvatar = (\r\n    <Avatar\r\n      src={userAvatar}\r\n      sx={{\r\n        zIndex: 11,\r\n        width: 64,\r\n        height: 64,\r\n        position: 'absolute',\r\n        alignItems: 'center',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        left: 0,\r\n        right: 0,\r\n        bottom: (theme) => theme.spacing(-4)\r\n      }}\r\n    />\r\n  );\r\n\r\n  const renderCover = (\r\n    <Box\r\n      component=\"img\"\r\n      src={coverAvatar}\r\n      sx={{\r\n        top: 0,\r\n        width: 1,\r\n        height: 1,\r\n        objectFit: 'cover',\r\n        position: 'absolute'\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <Box\r\n        sx={{\r\n          position: 'relative',\r\n          '&:after': {\r\n            top: 0,\r\n            content: \"''\",\r\n            width: '100%',\r\n            height: '100%',\r\n            position: 'absolute',\r\n            bgcolor: (theme) => alpha(theme.palette.primary.main, 0.42)\r\n          },\r\n          pt: {\r\n            xs: 'calc(100% / 3)',\r\n            sm: 'calc(100% / 4.66)'\r\n          }\r\n        }}\r\n      >\r\n        {renderShape}\r\n        {renderAvatar}\r\n        {renderCover}\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          p: (theme) => theme.spacing(4, 3, 3, 3)\r\n        }}\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n"],"names":["EarningCard","_jsx","Card","children","CardContent","_jsxs","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","styled","MainCard","_ref","theme","typography","color","overflow","position","zIndex","content","background","palette","primary","borderRadius","top","right","breakpoints","down","opacity","_ref2","isLoading","title","chartData","todayValue","useTheme","_Fragment","SkeletonTotalOrderCard","border","Box","p","mb","alignItems","xs","Typography","fontSize","fontWeight","mr","mt","Chart","TotalGrowthBarChart","spacing","gridSpacing","zeroMinWidth","chartDatas","options","xaxis","categories","series","data","SkeletonTotalGrowthBarChart","minHeight","display","type","colors","chart","id","stacked","toolbar","show","zoom","enabled","responsive","breakpoint","legend","offsetX","offsetY","plotOptions","bar","horizontal","columnWidth","fontFamily","labels","useSeriesColors","markers","radius","itemMargin","vertical","fill","dataLabels","grid","tooltip","fixed","y","formatter","val","marker","getLastSevenDays","dates","i","d","Date","setDate","getDate","month","getMonth","day","formattedDate","getFullYear","padStart","join","push","generateChartOptions","unit","map","date","values","value","sparkline","stroke","curve","min","max","length","yaxis","Math","x","format","Dashboard","setLoading","useState","statisticalData","setStatisticalData","requestChart","setRequestChart","quotaChart","setQuotaChart","tokenChart","setTokenChart","users","setUsers","userDashboard","async","res","API","get","success","message","lineData","groupedData","reduce","acc","cur","Day","RequestCount","Quota","PromptTokens","CompletionTokens","getLineDataGroup","getLineCardOption","lastSevenDays","result","Map","has","ModelName","newData","name","Array","set","index","indexOf","calculateQuota","undefined","getBarDataGroup","showError","useEffect","loadUser","lg","StatisticalLineChartCard","StatisticalBarChart","UserCard","paddingTop","quota","used_quota","request_count","lineDataGroup","field","lastItem","tmp","renderNumber","SvgColor","forwardRef","ref","src","other","component","className","bgcolor","mask","WebkitMask","propTypes","PropTypes","renderShape","shapeAvatar","bottom","renderAvatar","Avatar","userAvatar","marginLeft","marginRight","left","renderCover","coverAvatar","objectFit","alpha","main","pt","sm"],"sourceRoot":""}